/**
 *
 */
package fr.nikokode.textbatch;

import org.apache.log4j.Level;


/**
 * Base class for all exception generated by the tool.
 *
 * @author ngiraud
 *
 */
public abstract class ToolException extends BaseException {

    private static final long serialVersionUID = 8116761541462247081L;

    /**
     *
     * @param code
     * @param messageFormat
     * @param params
     * @param criticity
     * @param verbose
     */
    protected ToolException(
            String code,
            String messageFormat,
            String[] params,
            Level criticity,
            boolean verbose) {
        super(code, messageFormat, params, criticity, verbose);
        log();
    }

    /**
     *
     * @param code
     * @param messageFormat
     * @param params
     * @param criticity
     * @param cause
     * @param verbose
     */
    protected ToolException(
            String code,
            String messageFormat,
            String[] params,
            Level criticity,
            Throwable cause,
            boolean verbose) {
        super(code, messageFormat, params, criticity, cause, verbose);
        log();
    }

    protected ToolException(
            String code,
            String messageFormat,
            String[] params,
            Level criticity) {
        this(code, messageFormat, params, criticity, true);
        log();
    }

    protected ToolException(
            String code,
            String messageFormat,
            String[] params,
            Level criticity,
            Throwable cause) {
    	this(code, messageFormat, params, criticity, cause, true);
    	log();
    }

    public Throwable getRootCause() {
        Throwable rootCause = this;
        Throwable cause = getCause();
        while (cause != null) {
            rootCause = cause;
            cause = cause.getCause();
        }
        return rootCause;
    }

    protected void log() {
        Tool.getInstance().logError(this);
    }

}
